apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? preset.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            binaries.framework('common')
        }
        fromPreset(presets.jvm, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'

            // network
            implementation 'io.ktor:ktor-client-core:1.1.3'
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0'
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'

            implementation 'io.ktor:ktor-client-android:1.1.3'
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0'
        }

        iOSMain.dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.1.1"

            implementation "io.ktor:ktor-client-ios:1.1.3"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.10.0"
        }
    }
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework("common", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode